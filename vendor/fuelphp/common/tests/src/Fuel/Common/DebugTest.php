<?php
namespace Fuel\Common;

// needed to dump an object
class DumpTarget
{
	public $pub = 1;
	protected $prot = 'A';
	private $priv = array(true, null);
}

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-01-25 at 17:46:44.
 */
class DebugTest extends \PHPUnit_Framework_TestCase
{
	public $instance;

	/**
	 * helper method to remove platform depended information from dump results
	 */
	protected function dump($arg)
	{
		// capture the dump result
		ob_start();
		call_user_func_array(array($this->instance, 'dumpAsHtml'), func_get_args());
		$result = ob_get_contents();
		ob_end_clean();

		// remove the variable data from the output
		$result = preg_replace('/(\(Object #\d+\))/', '(Object #id)', $result);
		$result = preg_replace('/(\@ line: \d+\<)/', '@ line: 001<', $result);
		$result = preg_replace('/(: Resource id #\d+)/', ': Resource id #id', $result);

		// return the result
		return $result;
	}

	/**
	 * @covers Fuel\Common\Debug::__construct
	 * @group Common
	 */
	public function setup()
	{
		include_once __DIR__.'/../../../../resources/ConfigMock.php';
		include_once __DIR__.'/../../../../resources/SecurityMock.php';
		$inflector = new Inflector(new ConfigMock(), new SecurityMock(), new Str());

		include_once __DIR__.'/../../../../resources/InputMock.php';
		$this->instance = new Debug(new InputMock(), $inflector);
	}

	/**
	 * @covers Fuel\Common\Debug::setNestingLevel
	 * @group Common
	 */
	public function testSetNestingLevel()
	{
		$this->assertEquals(5, $this->instance->setNestingLevel());
		$this->assertEquals(10, $this->instance->setNestingLevel(10));
	}

	/**
	 * @covers Fuel\Common\Debug::setOpenToggle
	 * @group Common
	 */
	public function testSetOpenToggle()
	{
		$this->assertFalse($this->instance->setOpenToggle());
		$this->assertTrue($this->instance->setOpenToggle(true));
		$this->assertTrue($this->instance->setOpenToggle());
		$this->assertTrue($this->instance->setOpenToggle(null));
		$this->assertTrue($this->instance->setOpenToggle(0));
		$this->assertFalse($this->instance->setOpenToggle(false));
	}

	/**
	 * @covers Fuel\Common\Debug::dump
	 * @group Common
	 */
	public function testDumpAsText()
	{
		$expected = "string(1) \"a\"\n";

		ob_start();
		$this->instance->dump('a');
		$result = ob_get_contents();
		ob_end_clean();

		$this->assertEquals($expected, $result);
	}

	/**
	 * @covers Fuel\Common\Debug::dumpAsHtml
	 * @covers Fuel\Common\Debug::fileLines
	 * @covers Fuel\Common\Debug::format
	 * @covers ::cleanpath
	 * @group Common
	 */
	public function testDumpAsHtmlExpression()
	{
		$expected = <<<HTML
<script type="text/javascript">function fuel_debug_toggle(a){if(document.getElementById){if(document.getElementById(a).style.display=="none"){document.getElementById(a).style.display="block"}else{document.getElementById(a).style.display="none"}}else{if(document.layers){if(document.id.display=="none"){document.id.display="block"}else{document.id.display="none"}}else{if(document.all.id.style.display=="none"){document.all.id.style.display="block"}else{document.all.id.style.display="none"}}}};</script><div class="fuelphp-dump" style="font-size: 13px;background: #EEE !important; border:1px solid #666; color: #000 !important; padding:10px;"><h1 style="padding: 0 0 5px 0; margin: 0; font: bold 110% sans-serif;">File: VENDORPATH/fuelphp/common/tests/src/Fuel/Common/DebugTest.php @ line: 001</h1><pre style="overflow:auto;font-size:100%;"><strong>Expression: 'a'</strong>
<i></i> <strong></strong> (String): <span style="color:#E00000;">"a"</span> (1 characters)
</pre></div>
HTML;
		$output = $this->dump('a');
		$this->assertEquals($expected, $output);
	}

	/**
	 * @covers Fuel\Common\Debug::dumpAsHtml
	 * @covers Fuel\Common\Debug::fileLines
	 * @covers Fuel\Common\Debug::format
	 * @covers ::cleanpath
	 * @group Common
	 */
	public function testDumpAsHtmlVariable()
	{
		$expected = <<<HTML
<script type="text/javascript">function fuel_debug_toggle(a){if(document.getElementById){if(document.getElementById(a).style.display=="none"){document.getElementById(a).style.display="block"}else{document.getElementById(a).style.display="none"}}else{if(document.layers){if(document.id.display=="none"){document.id.display="block"}else{document.id.display="none"}}else{if(document.all.id.style.display=="none"){document.all.id.style.display="block"}else{document.all.id.style.display="none"}}}};</script><div class="fuelphp-dump" style="font-size: 13px;background: #EEE !important; border:1px solid #666; color: #000 !important; padding:10px;"><h1 style="padding: 0 0 5px 0; margin: 0; font: bold 110% sans-serif;">File: VENDORPATH/fuelphp/common/tests/src/Fuel/Common/DebugTest.php @ line: 001</h1><pre style="overflow:auto;font-size:100%;"><strong>Variable: \$varA</strong>
<i></i> <strong></strong> (String): <span style="color:#E00000;">"a"</span> (1 characters)
</pre></div>
HTML;
		$varA = 'a';
		$output = $this->dump($varA);
		$this->assertEquals($expected, $output);
	}

	/**
	 * @covers Fuel\Common\Debug::dumpAsHtml
	 * @covers Fuel\Common\Debug::fileLines
	 * @covers Fuel\Common\Debug::format
	 * @covers ::cleanpath
	 * @group Common
	 */
	public function testDumpAsHtmlVariables()
	{
		$expected = <<<HTML
<script type="text/javascript">function fuel_debug_toggle(a){if(document.getElementById){if(document.getElementById(a).style.display=="none"){document.getElementById(a).style.display="block"}else{document.getElementById(a).style.display="none"}}else{if(document.layers){if(document.id.display=="none"){document.id.display="block"}else{document.id.display="none"}}else{if(document.all.id.style.display=="none"){document.all.id.style.display="block"}else{document.all.id.style.display="none"}}}};</script><div class="fuelphp-dump" style="font-size: 13px;background: #EEE !important; border:1px solid #666; color: #000 !important; padding:10px;"><h1 style="padding: 0 0 5px 0; margin: 0; font: bold 110% sans-serif;">File: VENDORPATH/fuelphp/common/tests/src/Fuel/Common/DebugTest.php @ line: 001</h1><pre style="overflow:auto;font-size:100%;"><strong>Variable: \$varA</strong>
<i></i> <strong></strong> (String): <span style="color:#E00000;">"a"</span> (1 characters)

<strong>Variable: \$varB</strong>
<i></i> <strong></strong> (Integer): 123
</pre></div>
HTML;
		$varA = 'a';
		$varB = 123;
		$output = $this->dump($varA, $varB);
		$this->assertEquals($expected, $output);
	}

	/**
	 * @covers Fuel\Common\Debug::dumpAsHtml
	 * @covers Fuel\Common\Debug::fileLines
	 * @covers Fuel\Common\Debug::format
	 * @covers ::cleanpath
	 * @group Common
	 */
	public function testDumpAsHtmlComplex()
	{
		$expected = <<<HTML
<script type="text/javascript">function fuel_debug_toggle(a){if(document.getElementById){if(document.getElementById(a).style.display=="none"){document.getElementById(a).style.display="block"}else{document.getElementById(a).style.display="none"}}else{if(document.layers){if(document.id.display=="none"){document.id.display="block"}else{document.id.display="none"}}else{if(document.all.id.style.display=="none"){document.all.id.style.display="block"}else{document.all.id.style.display="none"}}}};</script><div class="fuelphp-dump" style="font-size: 13px;background: #EEE !important; border:1px solid #666; color: #000 !important; padding:10px;"><h1 style="padding: 0 0 5px 0; margin: 0; font: bold 110% sans-serif;">File: VENDORPATH/fuelphp/common/tests/src/Fuel/Common/DebugTest.php @ line: 001</h1><h5 style="border-bottom: 1px solid #CCC;padding: 0 0 5px 0; margin: 0 0 5px 0; font: bold 85% sans-serif;">Variable dumped: \$varB</h5>
<pre style="overflow:auto;font-size:100%;"><strong>Variable #1 of 1:</strong>
<i></i> <strong></strong> (Integer): 123
</pre></div><div class="fuelphp-dump" style="font-size: 13px;background: #EEE !important; border:1px solid #666; color: #000 !important; padding:10px;"><h1 style="padding: 0 0 5px 0; margin: 0; font: bold 110% sans-serif;">File: VENDORPATH/fuelphp/common/tests/src/Fuel/Common/DebugTest.php @ line: 001</h1><h5 style="border-bottom: 1px solid #CCC;padding: 0 0 5px 0; margin: 0 0 5px 0; font: bold 85% sans-serif;">Variable dumped: \$varB</h5>
<pre style="overflow:auto;font-size:100%;"><strong>Variable #1 of 1:</strong>
<i></i> <strong></strong> (Integer): 456
</pre></div>
HTML;

		$varA = 123;
		$varB = 456;
		$output = $this->dump($varA) . $this->dump($varB);
		$this->assertEquals($expected, $output);

		$expected = <<<HTML
<div class="fuelphp-dump" style="font-size: 13px;background: #EEE !important; border:1px solid #666; color: #000 !important; padding:10px;"><h1 style="padding: 0 0 5px 0; margin: 0; font: bold 110% sans-serif;">File: VENDORPATH/fuelphp/common/tests/src/Fuel/Common/DebugTest.php @ line: 001</h1><pre style="overflow:auto;font-size:100%;"><strong>Expression: (\$varA + \$varB)</strong>
<i></i> <strong></strong> (Integer): 579
</pre></div>
HTML;

		$output = $this->dump(($varA + $varB));
		$this->assertEquals($expected, $output);
	}

	/**
	 * @covers Fuel\Common\Debug::dumpAsHtml
	 * @covers Fuel\Common\Debug::fileLines
	 * @covers Fuel\Common\Debug::format
	 * @covers ::cleanpath
	 * @group Common
	 */
	public function testDumpAsHtmlArray()
	{
		$expected = <<<HTML
<script type="text/javascript">function fuel_debug_toggle(a){if(document.getElementById){if(document.getElementById(a).style.display=="none"){document.getElementById(a).style.display="block"}else{document.getElementById(a).style.display="none"}}else{if(document.layers){if(document.id.display=="none"){document.id.display="block"}else{document.id.display="none"}}else{if(document.all.id.style.display=="none"){document.all.id.style.display="block"}else{document.all.id.style.display="none"}}}};</script><div class="fuelphp-dump" style="font-size: 13px;background: #EEE !important; border:1px solid #666; color: #000 !important; padding:10px;"><h1 style="padding: 0 0 5px 0; margin: 0; font: bold 110% sans-serif;">File: VENDORPATH/fuelphp/common/tests/src/Fuel/Common/DebugTest.php @ line: 001</h1><pre style="overflow:auto;font-size:100%;"><strong>Expression: array(1, 'A', array('B'))</strong>
<i></i> <strong></strong> (Array, 3 elements) <a href="javascript:fuel_debug_toggle('fuel_debug_1');" title="Click to close">&crarr;</a>
<span id="fuel_debug_1" style="display: block;">&nbsp;&nbsp;&nbsp;&nbsp;<i></i> <strong>0</strong> (Integer): 1
&nbsp;&nbsp;&nbsp;&nbsp;<i></i> <strong>1</strong> (String): <span style="color:#E00000;">"A"</span> (1 characters)
&nbsp;&nbsp;&nbsp;&nbsp;<i></i> <strong>2</strong> (Array, 1 element)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...
</span></pre></div>
HTML;

		$this->instance->setNestingLevel(1);
		$output = $this->dump(array(1, 'A', array('B')));
		$this->assertEquals($expected, $output);
	}

	/**
	 * @covers Fuel\Common\Debug::dumpAsHtml
	 * @covers Fuel\Common\Debug::fileLines
	 * @covers Fuel\Common\Debug::format
	 * @covers ::cleanpath
	 * @group Common
	 */
	public function testDumpAsHtmlEmptyArray()
	{
		$expected = <<<HTML
<script type="text/javascript">function fuel_debug_toggle(a){if(document.getElementById){if(document.getElementById(a).style.display=="none"){document.getElementById(a).style.display="block"}else{document.getElementById(a).style.display="none"}}else{if(document.layers){if(document.id.display=="none"){document.id.display="block"}else{document.id.display="none"}}else{if(document.all.id.style.display=="none"){document.all.id.style.display="block"}else{document.all.id.style.display="none"}}}};</script><div class="fuelphp-dump" style="font-size: 13px;background: #EEE !important; border:1px solid #666; color: #000 !important; padding:10px;"><h1 style="padding: 0 0 5px 0; margin: 0; font: bold 110% sans-serif;">File: VENDORPATH/fuelphp/common/tests/src/Fuel/Common/DebugTest.php @ line: 001</h1><pre style="overflow:auto;font-size:100%;"><strong>Expression: array()</strong>
<i></i> <strong></strong> (Array, 0 elements)
</pre></div>
HTML;

		$output = $this->dump(array());
		$this->assertEquals($expected, $output);
	}

	/**
	 * @covers Fuel\Common\Debug::dumpAsHtml
	 * @covers Fuel\Common\Debug::fileLines
	 * @covers Fuel\Common\Debug::format
	 * @covers ::cleanpath
	 * @group Common
	 */
	public function testDumpAsHtmlValues()
	{
		$expected = <<<HTML
<script type="text/javascript">function fuel_debug_toggle(a){if(document.getElementById){if(document.getElementById(a).style.display=="none"){document.getElementById(a).style.display="block"}else{document.getElementById(a).style.display="none"}}else{if(document.layers){if(document.id.display=="none"){document.id.display="block"}else{document.id.display="none"}}else{if(document.all.id.style.display=="none"){document.all.id.style.display="block"}else{document.all.id.style.display="none"}}}};</script><div class="fuelphp-dump" style="font-size: 13px;background: #EEE !important; border:1px solid #666; color: #000 !important; padding:10px;"><h1 style="padding: 0 0 5px 0; margin: 0; font: bold 110% sans-serif;">File: VENDORPATH/fuelphp/common/tests/src/Fuel/Common/DebugTest.php @ line: 001</h1><pre style="overflow:auto;font-size:100%;"><strong>Expression: 1.23</strong>
<i></i> <strong></strong> (Float): 1.23

<strong>Expression: 1</strong>
<i></i> <strong></strong> (Integer): 1

<strong>Expression: null</strong>
<i></i> <strong></strong> : null

<strong>Expression: false</strong>
<i></i> <strong></strong> (Boolean): false
</pre></div>
HTML;

		$output = $this->dump(1.23, 1, null, false);
		$this->assertEquals($expected, $output);
	}

	/**
	 * @covers Fuel\Common\Debug::dumpAsHtml
	 * @covers Fuel\Common\Debug::fileLines
	 * @covers Fuel\Common\Debug::format
	 * @covers ::cleanpath
	 * @group Common
	 */
	public function testDumpAsHtmlObject()
	{
		$expected = <<<HTML
<script type="text/javascript">function fuel_debug_toggle(a){if(document.getElementById){if(document.getElementById(a).style.display=="none"){document.getElementById(a).style.display="block"}else{document.getElementById(a).style.display="none"}}else{if(document.layers){if(document.id.display=="none"){document.id.display="block"}else{document.id.display="none"}}else{if(document.all.id.style.display=="none"){document.all.id.style.display="block"}else{document.all.id.style.display="none"}}}};</script><div class="fuelphp-dump" style="font-size: 13px;background: #EEE !important; border:1px solid #666; color: #000 !important; padding:10px;"><h1 style="padding: 0 0 5px 0; margin: 0; font: bold 110% sans-serif;">File: VENDORPATH/fuelphp/common/tests/src/Fuel/Common/DebugTest.php @ line: 001</h1><pre style="overflow:auto;font-size:100%;"><strong>Variable: \$input</strong>
<i></i> <strong></strong> (Object #id): Fuel\Common\DumpTarget <a href="javascript:fuel_debug_toggle('fuel_debug_4');" title="Click to open">&crarr;</a>
<span id="fuel_debug_4" style="display: none;">&nbsp;&nbsp;&nbsp;&nbsp;<i><span style="color:green;">public</span></i> <strong>pub</strong> (Integer): 1
&nbsp;&nbsp;&nbsp;&nbsp;<i><span style="color:blue;">protected</span></i> <strong>prot</strong> (String): <span style="color:#E00000;">"A"</span> (1 characters)
&nbsp;&nbsp;&nbsp;&nbsp;<i><span style="color:red;">private</span></i> <strong>priv</strong> (Array, 2 elements)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...
&nbsp;&nbsp;&nbsp;&nbsp;<i><span style="color:green;">public</span></i> <strong>class</strong> (Object #id): stdClass<span id="fuel_debug_6" style="display: none;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...
</span></span></pre></div>
HTML;

		$this->instance->setNestingLevel(1);
		$input = new DumpTarget();
		$input->class = new \StdClass;
		$input->class->nested = 'Yes!';

		$output = $this->dump($input);
		$this->assertEquals($expected, $output);
	}

	/**
	 * @covers Fuel\Common\Debug::dumpAsHtml
	 * @covers Fuel\Common\Debug::fileLines
	 * @covers Fuel\Common\Debug::format
	 * @covers ::cleanpath
	 * @group Common
	 */
	public function testDumpAsHtmlEmptyObject()
	{
		$expected = <<<HTML
<script type="text/javascript">function fuel_debug_toggle(a){if(document.getElementById){if(document.getElementById(a).style.display=="none"){document.getElementById(a).style.display="block"}else{document.getElementById(a).style.display="none"}}else{if(document.layers){if(document.id.display=="none"){document.id.display="block"}else{document.id.display="none"}}else{if(document.all.id.style.display=="none"){document.all.id.style.display="block"}else{document.all.id.style.display="none"}}}};</script><div class="fuelphp-dump" style="font-size: 13px;background: #EEE !important; border:1px solid #666; color: #000 !important; padding:10px;"><h1 style="padding: 0 0 5px 0; margin: 0; font: bold 110% sans-serif;">File: VENDORPATH/fuelphp/common/tests/src/Fuel/Common/DebugTest.php @ line: 001</h1><pre style="overflow:auto;font-size:100%;"><strong>Variable: \$input</strong>
<i></i> <strong></strong> (Object #id): stdClass</pre></div>
HTML;

		$input = new \StdClass;
		$output = $this->dump($input);
		$this->assertEquals($expected, $output);
	}

	/**
	 * @covers Fuel\Common\Debug::dumpAsHtml
	 * @covers Fuel\Common\Debug::fileLines
	 * @covers Fuel\Common\Debug::format
	 * @covers ::cleanpath
	 * @group Common
	 */
	public function testDumpAsHtmlResource()
	{
		$expected = <<<HTML
<script type="text/javascript">function fuel_debug_toggle(a){if(document.getElementById){if(document.getElementById(a).style.display=="none"){document.getElementById(a).style.display="block"}else{document.getElementById(a).style.display="none"}}else{if(document.layers){if(document.id.display=="none"){document.id.display="block"}else{document.id.display="none"}}else{if(document.all.id.style.display=="none"){document.all.id.style.display="block"}else{document.all.id.style.display="none"}}}};</script><div class="fuelphp-dump" style="font-size: 13px;background: #EEE !important; border:1px solid #666; color: #000 !important; padding:10px;"><h1 style="padding: 0 0 5px 0; margin: 0; font: bold 110% sans-serif;">File: VENDORPATH/fuelphp/common/tests/src/Fuel/Common/DebugTest.php @ line: 001</h1><pre style="overflow:auto;font-size:100%;"><strong>Variable: \$fh</strong>
<i></i> <strong></strong>: Resource id #id
</pre></div>
HTML;
		$fh = fopen(__FILE__, 'r');
		$output = $this->dump($fh);
		$this->assertEquals($expected, $output);
		fclose($fh);
	}

	/**
	 * This method uses the InputMock.php file from the resources folder as file input!
	 *
	 * @covers Fuel\Common\Debug::fileLines
	 * @group Common
	 */
	public function testFileLines()
	{
		$expected = '';

		$output = $this->instance->fileLines('eval()\'d code', 1);
		$this->assertEquals($expected, $output);

		$expected = array(
			0 => '<span style="color: #000000"><span style="color: #0000BB"></span></span>',
			1 => '<span style="color: #000000"><span style="color: #0000BB"></span><span style="color: #007700">&lt;?</span><span style="color: #0000BB">php</span></span>',
			2 => '<span style="color: #000000"><span style="color: #0000BB"></span><span style="color: #007700">namespace&nbsp;</span><span style="color: #0000BB">Fuel</span><span style="color: #007700">\</span><span style="color: #0000BB">Common</span><span style="color: #007700">;</span></span>',
			3 => '<span style="color: #000000"><span style="color: #0000BB"></span></span>',
			4 => '<span style="color: #000000"><span style="color: #0000BB"></span><span style="color: #FF8000">/**</span></span>',
			5 => '<span style="color: #000000"><span style="color: #0000BB">&nbsp;</span><span style="color: #007700">*&nbsp;</span><span style="color: #0000BB">mock&nbsp;</span><span style="color: #007700">for&nbsp;</span><span style="color: #0000BB">Input&nbsp;DataContainer</span></span>',
			6 => '<span style="color: #000000"><span style="color: #0000BB">&nbsp;</span><span style="color: #007700">*</span></span>',
  		);

		$output = $this->instance->fileLines(__DIR__.'/../../../../resources/InputMock.php',1, true);
		$this->assertEquals($expected, $output);

		$expected = array(
  		);

		$output = $this->instance->fileLines(__DIR__.'/../../../../resources/InputMock.php',9999);
		$this->assertEquals($expected, $output);
	}

	/**
	 * @covers Fuel\Common\Debug::backtrace
	 * @group Common
	 */
	public function testBacktrace()
	{
		ob_start();
		$this->instance->backtrace();
		$output = ob_get_contents();
		ob_end_clean();

		$this->assertTrue(strpos($output, 'fuelphp/common/tests/src/Fuel/Common/DebugTest.php') > 0);
	}

	/**
	 * @covers Fuel\Common\Debug::classes
	 * @group Common
	 */
	public function testClasses()
	{
		ob_start();
		$this->instance->classes();
		$output = ob_get_contents();
		ob_end_clean();

		$expected = '[0] =>
  string(8) "stdClass"';
		$this->assertTrue(strpos($output, $expected) > 0);

		$this->assertTrue(strpos($output, 'string(22) "BadMethodCallException"') > 0);
	}

	/**
	 * @covers Fuel\Common\Debug::interfaces
	 * @group Common
	 */
	public function testInterfaces()
	{
		ob_start();
		$this->instance->interfaces();
		$output = ob_get_contents();
		ob_end_clean();

		$this->assertTrue(strpos($output, 'string(11) "ArrayAccess"') > 0);
		$this->assertTrue(strpos($output, 'string(22) "PHPUnit_Framework_Test"') > 0);
	}

	/**
	 * @covers Fuel\Common\Debug::includes
	 * @group Common
	 */
	public function testIncludes()
	{
		ob_start();
		$this->instance->includes();
		$output = ob_get_contents();
		ob_end_clean();

		$this->assertTrue(strpos($output, '/composer/autoload_namespaces.php') > 0);
		$this->assertTrue(strpos($output, '/fuelphp/common/tests/src/Fuel/Common/DebugTest.php') > 0);
	}

	/**
	 * @covers Fuel\Common\Debug::functions
	 * @group Common
	 */
	public function testFunctions()
	{
		ob_start();
		$this->instance->functions();
		$output = ob_get_contents();
		ob_end_clean();

		$this->assertTrue(strpos($output, 'string(12) "zend_version"') > 0);

		$expected = '  \'user\' =>
  array(2) {
    [0] =>
    string(6) "result"
    [1] =>
    string(9) "cleanpath"
  }
';
		$this->assertTrue(strpos($output, $expected) > 0);
	}

	/**
	 * @covers Fuel\Common\Debug::constants
	 * @group Common
	 */
	public function testConstants()
	{
		ob_start();
		$this->instance->constants();
		$output = ob_get_contents();
		ob_end_clean();

		$expected = "'E_ERROR' =>
  int(1)
  'E_RECOVERABLE_ERROR' =>
  int(4096)
  'E_WARNING' =>
  int(2)
  'E_PARSE' =>
  int(4)
  'E_NOTICE' =>
  int(8)
  'E_STRICT' =>
  int(2048)
  'E_DEPRECATED' =>
  int(8192)
  'E_CORE_ERROR' =>
  int(16)
";
		$this->assertTrue(strpos($output, $expected) > 0);
	}

	/**
	 * @covers Fuel\Common\Debug::extensions
	 * @group Common
	 */
	public function testExtensions()
	{
		ob_start();
		$this->instance->extensions();
		$output = ob_get_contents();
		ob_end_clean();

		$this->assertTrue(strpos($output, 'string(4) "Core"') > 0);
		$this->assertTrue(strpos($output, 'string(3) "SPL"') > 0);
	}

	/**
	 * @covers Fuel\Common\Debug::headers
	 * @group Common
	 */
	public function testHeaders()
	{
		ob_start();
		$this->instance->headers();
		$output = ob_get_contents();
		ob_end_clean();

		$expected = "array(2) {
  'Content-Type' =>
  string(16) \"application/json\"
  'Content-Length' =>
  int(12345)
}
";

		$this->assertEquals($expected, $output);
	}

	/**
	 * @covers Fuel\Common\Debug::phpini
	 * @group Common
	 */
	public function testPHPini()
	{
		ob_start();
		$this->instance->phpini();
		$output = ob_get_contents();
		ob_end_clean();
		$output = preg_replace('/(array\(\d+\) \{)/', 'array (#) {', $output);

		$expected = "'PHP' =>
  array (#) {";

		$this->assertTrue(strpos($output, $expected) > 0);
	}

	/**
	 * @covers Fuel\Common\Debug::benchmark
	 * @group Common
	 */
	public function testBenchmark()
	{
		$output = $this->instance->benchmark(function() { sleep(2); return 'sleep 2';});

		$this->assertEquals('sleep 2', $output['result']);
		$this->assertEquals('2.000', substr($output['time'],0,5));
	}
}
