<?php
namespace Fuel\Common;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-01-25 at 17:46:44.
 */
class InflectorTest extends \PHPUnit_Framework_TestCase
{
	public $instance;

	/**
	 * @covers Fuel\Common\Inflector::__construct
	 * @group Common
	 */
	public function setup()
	{
		include_once __DIR__.'/../../../../resources/ConfigMock.php';
		include_once __DIR__.'/../../../../resources/SecurityMock.php';
		$this->instance = new Inflector(new ConfigMock(), new SecurityMock(), new Str());
	}

	public function ordinalizeProvider()
	{
		return array(
			array(1, 'st'),
			array(21, 'st'),
			array(2, 'nd'),
			array(22, 'nd'),
			array(3, 'rd'),
			array(23, 'rd'),
			array(4, 'th'),
			array(24, 'th'),
			array(111, 'th'),
			array(112, 'th'),
			array(113, 'th'),
		);
	}

	/**
	 * @covers Fuel\Common\Inflector::ordinalize
	 * @group Common
	 *
	 * @dataProvider ordinalizeProvider
	 */
	public function testOrdinalize($number, $ending)
	{
		$this->assertEquals($number.$ending, $this->instance->ordinalize($number));
	}

	/**
	 * @covers Fuel\Common\Inflector::ordinalize
	 * @group Common
	 */
	public function testOrdinalizeOfString()
	{
		$this->assertEquals('Foo', $this->instance->ordinalize('Foo'));
	}

	/**
	 * @covers Fuel\Common\Inflector::ascii
	 * @group Common
	 */
	public function testAscii()
	{
		$output = $this->instance->ascii('Inglés');
		$expected = "Ingles";
		$this->assertEquals($expected, $output);
	}

	/**
	 * @covers Fuel\Common\Inflector::camelize
	 * @group Common
	 */
	public function testCamelize()
	{
		$output = $this->instance->camelize('apples_and_oranges');
		$expected = 'ApplesAndOranges';
		$this->assertEquals($expected, $output);
	}

	/**
	 * @covers Fuel\Common\Inflector::classify
	 * @group Common
	 */
	public function testClassify()
	{
		$output = $this->instance->classify('fuel_users');
		$expected = 'Fuel_User';
		$this->assertEquals($expected, $output);
	}

	/**
	 * @covers Fuel\Common\Inflector::demodulize
	 * @group Common
	 */
	public function testDemodulize()
	{
		$output = $this->instance->demodulize('Uri::main()');
		$expected = 'main()';
		$this->assertEquals($expected, $output);
	}

	/**
	 * @covers Fuel\Common\Inflector::denamespace
	 * @group Common
	 */
	public function testDenamespace()
	{
		$this->assertEquals($this->instance->denamespace('Fuel\\SomeClass'), 'SomeClass');
		$this->assertEquals($this->instance->denamespace('\\SomeClass'), 'SomeClass');
		$this->assertEquals($this->instance->denamespace('SomeClass'), 'SomeClass');
		$this->assertEquals($this->instance->denamespace('SomeClass\\'), 'SomeClass');
		$this->assertEquals($this->instance->denamespace('Fuel\\SomeClass\\'), 'SomeClass');
		$this->assertEquals($this->instance->denamespace('\\Fuel\\SomeClass\\'), 'SomeClass');
	}

	/**
	 * @covers Fuel\Common\Inflector::foreignKey
	 * @group Common
	 */
	public function testForeignKey()
	{
		$output = $this->instance->foreignKey('Inflector');
		$expected = 'inflector_id';
		$this->assertEquals($expected, $output);

		$output = $this->instance->foreignKey('Inflector', false);
		$expected = 'inflectorid';
		$this->assertEquals($expected, $output);
	}

	/**
	 * @covers Fuel\Common\Inflector::foreignKey
	 * @group Common
	 */
	public function testForeignKeyWithModelPrefx()
	{
		$this->assertEquals('inflector_id', $this->instance->foreignKey('Model_Inflector'));
		$this->assertEquals('inflector_id', $this->instance->foreignKey('Model\\Inflector'));
		$this->assertEquals('inflector_id', $this->instance->foreignKey('\\Some\\Namespace\\Model\\Inflector'));
	}

	/**
	 * @covers Fuel\Common\Inflector::friendlyTitle
	 * @group Common
	 */
	public function testFriendlyTitle()
	{
		$output = $this->instance->friendlyTitle('Fuel is a community driven PHP 5 web framework.');
		$expected = 'Fuel-is-a-community-driven-PHP-5-web-framework';
		$this->assertEquals($expected, $output);
	}

	/**
	 * @covers Fuel\Common\Inflector::friendlyTitle
	 * @group Common
	 */
	public function testFriendlyTitleSep()
	{
		$output = $this->instance->friendlyTitle('Fuel is a community driven PHP 5 web framework.', '_');
		$expected = 'Fuel_is_a_community_driven_PHP_5_web_framework';
		$this->assertEquals($expected, $output);
	}

	/**
	 * @covers Fuel\Common\Inflector::friendlyTitle
	 * @group Common
	 */
	public function testFriendlyTitleLowercase()
	{
		$output = $this->instance->friendlyTitle('Fuel is a community driven PHP 5 web framework.', '-', true);
		$expected = 'fuel-is-a-community-driven-php-5-web-framework';
		$this->assertEquals($expected, $output);
	}

	/**
	 * @covers Fuel\Common\Inflector::friendlyTitle
	 * @covers Fuel\Common\Inflector::ascii
	 * @group Common
	 */
	public function testFriendlyTitleNonAscii()
	{
		$output = $this->instance->friendlyTitle('وقود هو مجتمع مدفوعة إطار شبكة الإنترنت');
		$expected = '';
		$this->assertEquals($expected, $output);
	}

	/**
	 * @covers Fuel\Common\Inflector::friendlyTitle
	 * @covers Fuel\Common\Inflector::ascii
	 * @group Common
	 */
	public function testFriendlyTitleAllowNonAscii()
	{
		$output = $this->instance->friendlyTitle('وقود هو مجتمع مدفوعة إطار شبكة الإنترنت', '-', false, true);
		$expected = 'وقود-هو-مجتمع-مدفوعة-إطار-شبكة-الإنترنت';
		$this->assertEquals($expected, $output);
	}

	/**
	 * @covers Fuel\Common\Inflector::humanize
	 * @group Common
	 */
	public function testHumanize()
	{
		$output = $this->instance->humanize('apples_and_oranges');
		$expected = 'Apples and oranges';
		$this->assertEquals($expected, $output);
	}

	/**
	 * @covers Fuel\Common\Inflector::isCountable
	 * @group Common
	 */
	public function testIsCountable()
	{
		$output = $this->instance->isCountable('fish');
		$this->assertFalse($output);

		$output = $this->instance->isCountable('apple');
		$this->assertTrue($output);
	}

	/**
	 * @covers Fuel\Common\Inflector::pluralize
	 * @group Common
	 */
	public function testPluralize()
	{
		$output = $this->instance->pluralize('apple');
		$expected = "apples";
		$this->assertEquals($expected, $output);

		$output = $this->instance->pluralize('apple', 1);
		$expected = "apple";
		$this->assertEquals($expected, $output);
	}

	/**
	 * @covers Fuel\Common\Inflector::pluralize
	 * @group Common
	 */
	public function testPluralizeUncountable()
	{
		$this->assertEquals('equipment', $this->instance->pluralize('equipment'));
	}

	/**
	 * @covers Fuel\Common\Inflector::singularize
	 * @group Common
	 */
	public function testSingularize()
	{
		$output = $this->instance->singularize('apples');
		$expected = "apple";
		$this->assertEquals($expected, $output);
	}

	/**
	 * @covers Fuel\Common\Inflector::singularize
	 * @group Common
	 */
	public function testSingularizeUncountable()
	{
		$this->assertEquals('equipment', $this->instance->singularize('equipment'));
	}

	public function tableizeProvider()
	{
		return array(
			array('\\Model\\User', 'users'),
			array('\\Model\\Person', 'people'),
			array('\\Model\\Mouse', 'mice'),
			array('\\Model\\Ox', 'oxen'),
			array('\\Model\\Matrix', 'matrices'),
			array('Model_User', 'users'),
			array('\\Some\\Namespace\\Model\\Matrix', 'matrices'),
			array('Some\\Namespace\\Model\\User', 'users'),
		);
	}

	/**
	 * @covers Fuel\Common\Inflector::tableize
	 * @group Common
	 *
	 * @dataProvider tableizeProvider
	 */
	public function testTableize($class, $table)
	{
		$this->assertEquals($this->instance->tableize($class), $table);
	}

	public function getNamespaceProvider()
	{
		return array(
			array('\\Model\\User', 'Model\\'),
			array('\\Fuel\\Core\\Inflector', 'Fuel\\Core\\'),
			array('Model_User', ''),
		);
	}

	/**
	 * @covers Fuel\Common\Inflector::getNamespace
	 * @group Common
	 *
	 * @dataProvider getNamespaceProvider
	 */
	public function testGetNamespace($class, $namespace)
	{
		$this->assertEquals($this->instance->getNamespace($class), $namespace);
	}

	/**
	 * @covers Fuel\Common\Inflector::underscore
	 * @group Common
	 */
	public function testUnderscore()
	{
		$output = $this->instance->underscore('ApplesAndOranges');
		$expected = "apples_and_oranges";
		$this->assertEquals($expected, $output);
	}

	/**
	 * @covers Fuel\Common\Inflector::wordsToUpper
	 * @group Common
	 */
	public function testWordsToUpper()
	{
		$output = $this->instance->wordsToUpper('Fuel is a community driven PHP 5 web framework', '-');
		$expected = "Fuel-Is-A-Community-Driven-PHP-5-Web-Framework";
		$this->assertEquals($expected, $output);
	}
}
