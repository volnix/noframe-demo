<?php

namespace Fuel\Common;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-01-25 at 17:46:44.
 */
class TableTest extends \PHPUnit_Framework_TestCase
{

	/**
	 * @var Table
	 */
	protected $object;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp()
	{
		$this->object = new Table;
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown()
	{

	}

	/**
	 * @covers Fuel\Common\Table::getCurrentRow
	 * @covers Fuel\Common\Table::createRow
	 * @group Common
	 */
	public function testGetCurrentRow()
	{
		$this->assertInstanceOf(
				'Fuel\Common\Table\Row',
				$this->object->getCurrentRow()
		);
	}

	/**
	 * @covers Fuel\Common\Table::getRows
	 * @group Common
	 */
	public function testGetRowsEmpty()
	{
		$this->assertEquals(0, count($this->object->getRows()));
	}

	/**
	 * @covers Fuel\Common\Table::getRows
	 * @covers Fuel\Common\Table::addRow
	 * @covers Fuel\Common\Table::createRow
	 * @group Common
	 */
	public function testAddRow()
	{
		$rowCount = 10;

		for ($i=0; $i < $rowCount; $i++)
		{
			$this->object->createRow()->addRow();
		}

		$this->assertEquals($rowCount, count($this->object->getRows()));
	}

	/**
	 * @covers Fuel\Common\Table::addCell
	 * @covers Fuel\Common\Table::getCurrentRow
	 * @covers Fuel\Common\Table::createRow
	 * @covers Fuel\Common\Table::constructCell
	 * @group Common
	 */
	public function testAddCellContent()
	{
		$this->object->addCell('This is some content');

		$this->assertEquals(
				1,
				count($this->object->getCurrentRow())
		);
	}

	/**
	 * @covers Fuel\Common\Table::addCell
	 * @covers Fuel\Common\Table::getCurrentRow
	 * @covers Fuel\Common\Table::createRow
	 * @group Common
	 */
	public function testAddCell()
	{
		$this->object->addCell(new Table\Cell('This is some content'));

		$this->assertEquals(
				1,
				count($this->object->getCurrentRow())
		);
	}

	/**
	 * @covers Fuel\Common\Table::setAttributes
	 * @covers Fuel\Common\Table::getAttributes
	 * @group Common
	 */
	public function testSetGetAttributes()
	{
		$attributes = array('class' => 'table', 'id' => 'test');

		$this->object->setAttributes($attributes);

		$this->assertEquals($attributes, $this->object->getAttributes());
	}

	/**
	 * @covers Fuel\Common\Table::setCurrentRowAttributes
	 * @covers Fuel\Common\Table::getCurrentRow
	 * @covers Fuel\Common\Table::createRow
	 * @group Common
	 */
	public function testSetRowAttributes()
	{
		$attributes = array('name' => 'test', 'id' => 'foobar');
		$this->object->setCurrentRowAttributes($attributes);

		$this->assertEquals(
			$attributes,
			$this->object->getCurrentRow()->getAttributes()
		);
	}

	/**
	 * @covers Fuel\Common\Table::createRow
	 * @covers Fuel\Common\Table::addRow
	 * @covers Fuel\Common\Table::getHeaderRows
	 * @group Common
	 */
	public function testAddHeader()
	{
		$this->object->createRow(Table\EnumRowType::Header)
			->addRow();

		$this->assertEquals(1, count($this->object->getHeaderRows()));
	}

	/**
	 * @covers Fuel\Common\Table::createRow
	 * @covers Fuel\Common\Table::addRow
	 * @covers Fuel\Common\Table::getFooterRows
	 * @group Common
	 */
	public function testAddFooter()
	{
		$this->object->createRow(Table\EnumRowType::Footer)
			->addRow();

		$this->assertEquals(1, count($this->object->getFooterRows()));
	}

	/**
	 * @expectedException InvalidArgumentException
	 * @group Common
	 */
	public function testAddInvalidRowType()
	{
		$this->object->createRow(42) //Invalid row type
			->addRow();
	}

}
