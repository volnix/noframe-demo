<?php

namespace Fuel\Common;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-01-25 at 17:46:44.
 */
class DateTest extends \PHPUnit_Framework_TestCase
{
	public $instance;

	/**
	 * @covers Fuel\Common\Date::__construct
	 * @group Common
	 */
	public function setup()
	{
		// make sure we have a known default timezone
		date_default_timezone_set('Europe/Amsterdam');

		// @1387751018 == Sun Dec 22 23:23:38 2013 in Europe/Amsterdam
		$this->instance = new Date('@1387751018', 'Europe/Amsterdam', array(
			'gmtOffset' => 0,
			'encoding' => 'UTF8',
			'defaultTimezone' => 'Europe/Amsterdam',
			'patterns' => array(
				'local'		 => '%c',
				'mysql'		 => '%Y-%m-%d %H:%M:%S',
				'mysql_date' => '%Y-%m-%d',
				'us'		 => '%m/%d/%Y',
				'us_short'	 => '%m/%d',
				'us_named'	 => '%B %d %Y',
				'us_full'	 => '%I:%M %p, %B %d %Y',
				'eu'		 => '%d/%m/%Y',
				'eu_short'	 => '%d/%m',
				'eu_named'	 => '%d %B %Y',
				'eu_full'	 => '%H:%M, %d %B %Y',
				'24h'		 => '%H:%M',
				'12h'		 => '%I:%M %p'
			),
		));
	}

	/**
	 * @covers Fuel\Common\Date::defaultTimezone
	 * @group Common
	 */
	public function testDefaultTimezone()
	{
		$timezone = Date::defaultTimezone();
		$this->assertTrue($timezone instanceOf \DateTimeZone);
		$this->assertEquals($timezone->getName(), date_default_timezone_get());

	}

	/**
	 * @covers Fuel\Common\Date::defaultTimezone
	 * @expectedException  Exception
	 * @group Common
	 */
	public function testDefaultTimezoneException()
	{
		$timezone = Date::defaultTimezone('Illegal/Timezone');
	}

	/**
	 * @covers Fuel\Common\Date::__construct
	 * @covers Fuel\Common\Date::getOffset
	 * @group Common
	 */
	public function testConstructor()
	{
		// 'now' respects gmtOffset
		$expected = date('D M d H:i:s Y', time());
		$instance = new Date('now', 'Europe/Amsterdam', array());
		$this->assertEquals($expected, (string) $instance);
		$this->assertEquals(3600, $instance->getOffset());

		// these input a fixed GMT time
		$expected = date('D M d H:i:s Y', time());
		$instance = new Date(time(), 'Europe/Amsterdam', array());
		$this->assertEquals($expected, (string) $instance);

		$instance = new Date(time(), null, array());
		$this->assertEquals($expected, (string) $instance);

		$instance = new Date(new \DateTime(), null, array());
		$this->assertEquals($expected, (string) $instance);
	}

	/**
	 * @covers Fuel\Common\Date::getLastErrors
	 * @group Common
	 */
	public function testGetLastErrors()
	{
		$result = Date::getLastErrors();
		$expected = array(
			'warning_count' => 0,
			'warnings' => array(),
			'error_count' => 0,
			'errors' => array(),
		);
		$this->assertEquals($result, $expected);
	}

	/**
	 * @covers Fuel\Common\Date::__wakeup
	 * @group Common
	 */
	public function testSleepWakeup()
	{
		$serialized = serialize($this->instance);
		$unserialized = unserialize($serialized);
		$this->assertEquals($unserialized, $this->instance);
	}

	/**
	 * @covers Fuel\Common\Date::__set_state
	 * @group Common
	 */
	public function testSetState()
	{
		eval('$imported = '.var_export($this->instance, true) . ';');
		$this->assertEquals($imported, $this->instance);
	}
	/**
	 * @covers Fuel\Common\Date::__toString
	 * @group Common
	 */
	public function testToSting()
	{
		$result = (string) $this->instance;
		$expected = 'Sun Dec 22 23:23:38 2013';
		$this->assertEquals($result, $expected);
	}

	/**
	 * @covers Fuel\Common\Date::createFromFormat
	 * @covers Fuel\Common\Date::getTimezone
	 * @covers Fuel\Common\Date::getTimestamp
	 * @group Common
	 */
	public function testCreateFromFormat()
	{
		// no match between input time format and format string
		$result = $this->instance->createFromFormat('mysql', time());
		$this->assertFalse($result);

		// no match between input time format and format string
		$time = time();
		$expected = date('D M d H:i:s Y', $time);
		$result = $this->instance->createFromFormat('mysql', date('Y-m-d H:i:s', $time));
		$this->assertEquals((string) $result, $expected);
		$this->assertTrue($result instanceOf Date);
		$this->assertEquals($result->getTimestamp(), $time);
		$timezone = $result->getTimezone();
		$this->assertTrue($timezone instanceOf \DateTimeZone);
		$this->assertEquals($timezone->getName(), 'Europe/Amsterdam');

		// Input New York time, output Amsterdam time
		$time = time();
		$expected = date('D M d H:i:s Y', $time+(6*3600));
		$result = $this->instance->createFromFormat('mysql', date('Y-m-d H:i:s', $time), 'America/New_York');
		$this->assertEquals((string) $result, $expected);

		$expected = array(
			'warning_count' => 0,
			'warnings' => array(),
			'error_count' => 1,
			'errors' => array(
				1 =>"Data missing"
			)
		);
		$result = $this->instance->createFromFormat('*&(*(*&$', '0');
		$this->assertEquals(Date::getLastErrors(), $expected);
	}

	/**
	 * @covers Fuel\Common\Date::createFromFormat
	 * @expectedException  OutOfBoundsException
	 * @group Common
	 */
	public function testCreateFromFormat32bitException()
	{
		$result = $this->instance->createFromFormat('mysql', '1000-01-01 01:01:01');

		// need to fake an exception here on 64 bit systems so the tests don't fail
		if (PHP_INT_SIZE !== 4)
		{
			throw new \OutOfBoundsException('test result faked, this is a 64-bit OS!');
		}
	}

	/**
	 * @covers Fuel\Common\Date::createFromFormat
	 * @expectedException  OutOfBoundsException
	 * @group Common
	 */
	public function testCreateFromFormatIllegalException()
	{
		$result = $this->instance->createFromFormat('mysql', '1000-01-01 01:01:01 illegal format');
	}

	/**
	 * @covers Fuel\Common\Date::add
	 * @group Common
	 */
	public function testAdd()
	{
		$expected = 'Sun Dec 22 23:23:48 2013';
		$this->instance->add(10);
		$this->assertEquals((string) $this->instance, $expected);

		$expected = 'Sun Dec 22 23:23:38 2013';
		$this->instance->add(-10);
		$this->assertEquals((string) $this->instance, $expected);

		$er = error_reporting(0);
		$result = $this->instance->add('invalid');
		$this->assertFalse($result);
		error_reporting($er);
	}

	/**
	 * @covers Fuel\Common\Date::add
	 * @expectedException PHPUnit_Framework_Error_Warning
	 * @group Common
	 */
	public function testAddException()
	{
		$this->instance->add('stringvalue');
	}

	/**
	 * @covers Fuel\Common\Date::sub
	 * @group Common
	 */
	public function testSub()
	{
		$expected = 'Sun Dec 22 23:23:28 2013';
		$this->instance->sub(10);
		$this->assertEquals((string) $this->instance, $expected);

		$expected = 'Sun Dec 22 23:23:38 2013';
		$this->instance->sub(-10);
		$this->assertEquals((string) $this->instance, $expected);

		$er = error_reporting(0);
		$result = $this->instance->sub('invalid');
		$this->assertFalse($result);
		error_reporting($er);
	}

	/**
	 * @covers Fuel\Common\Date::sub
	 * @expectedException PHPUnit_Framework_Error_Warning
	 * @group Common
	 */
	public function testSubException()
	{
		$this->instance->sub('stringvalue');
	}

	/**
	 * @covers Fuel\Common\Date::modify
	 * @group Common
	 */
	public function testModify()
	{
		$expected = 'Sun Dec 22 23:23:48 2013';
		$this->instance->modify('+10 sec');
		$this->assertEquals((string) $this->instance, $expected);

		$expected = 'Sun Dec 22 23:23:38 2013';
		$this->instance->modify('-10 sec');
		$this->assertEquals((string) $this->instance, $expected);

		$er = error_reporting(0);
		$result = $this->instance->modify('invalid');
		$this->assertFalse($result);
		error_reporting($er);
	}

	/**
	 * @covers Fuel\Common\Date::modify
	 * @expectedException PHPUnit_Framework_Error_Warning
	 * @group Common
	 */
	public function testModifyException()
	{
		$this->instance->modify('stringvalue');
	}

	/**
	 * @covers Fuel\Common\Date::setDate
	 * @group Common
	 */
	public function testSetDate()
	{
		$expected = 'Sat Dec 22 23:23:38 2012';
		$this->instance->setDate(2012, 12, 22);
		$this->assertEquals((string) $this->instance, $expected);

		$er = error_reporting(0);
		$result = $this->instance->setDate('this', 'is', 'invalid');
		$this->assertFalse($result);
		error_reporting($er);
	}

	/**
	 * @covers Fuel\Common\Date::setDate
	 * @expectedException PHPUnit_Framework_Error_Notice
	 * @group Common
	 */
	public function testSetDateException()
	{
		// day has a space at the end
		$this->instance->setDate('2012', '12', '22 ');
	}

	/**
	 * @covers Fuel\Common\Date::setISODate
	 * @group Common
	 */
	public function testSetISODate()
	{
		$expected = 'Sun Dec 22 23:23:38 2013';
		$this->instance->setISODate(2013, 51, 7);
		$this->assertEquals((string) $this->instance, $expected);

		$er = error_reporting(0);
		$result = $this->instance->setISODate('this', 'is', 'invalid');
		$this->assertFalse($result);
		error_reporting($er);
	}

	/**
	 * @covers Fuel\Common\Date::setISODate
	 * @expectedException PHPUnit_Framework_Error_Notice
	 * @group Common
	 */
	public function testSetISODateException()
	{
		// day has a space at the end
		$this->instance->setISODate('2012', '51', '7 ');
	}

	/**
	 * @covers Fuel\Common\Date::setTime
	 * @group Common
	 */
	public function testSetTime()
	{
		$expected = 'Sun Dec 22 12:13:14 2013';
		$this->instance->setTime(12, 13, 14);
		$this->assertEquals((string) $this->instance, $expected);

		$er = error_reporting(0);
		$result = $this->instance->setTime('this', 'is', 'invalid');
		$this->assertFalse($result);
		error_reporting($er);
	}

	/**
	 * @covers Fuel\Common\Date::setTime
	 * @expectedException PHPUnit_Framework_Error_Notice
	 * @group Common
	 */
	public function testSetTimeException()
	{
		// seconds has a space at the end
		$this->instance->setTime('12', '13', '14 ');
	}

	/**
	 * @covers Fuel\Common\Date::setTimestamp
	 * @group Common
	 */
	public function testSetTimestamp()
	{
		$expected = 'Sun Dec 22 20:36:58 2013';
		$this->instance->setTimestamp(1387741018);
		$this->assertEquals((string) $this->instance, $expected);

		$er = error_reporting(0);
		$result = $this->instance->setTimestamp('invalid');
		$this->assertFalse($result);
		error_reporting($er);
	}

	/**
	 * @covers Fuel\Common\Date::setTimestamp
	 * @expectedException PHPUnit_Framework_Error_Warning
	 * @group Common
	 */
	public function testSetTimestampException()
	{
		$this->instance->setTimestamp('invalid');
	}

	/**
	 * @covers Fuel\Common\Date::setTimezone
	 * @group Common
	 */
	public function testSetTimezone()
	{
		$expected = 'Sun Dec 22 23:23:38 2013';
		$this->instance->setTimezone('America/New_York');
		$this->assertEquals((string) $this->instance, $expected);

		$expected = 'Sun Dec 22 23:23:38 2013';
		$this->instance->setTimezone(null);
		$this->assertEquals((string) $this->instance, $expected);
	}

	/**
	 * @covers Fuel\Common\Date::getDateTime
	 * @group Common
	 */
	public function testGetDateTime()
	{
		$datetime = $this->instance->getDateTime();
		$this->assertEquals($this->instance->getTimestamp(), $datetime->getTimestamp());
	}

	/**
	 * @covers Fuel\Common\Date::diff
	 * @group Common
	 */
	public function testDiff()
	{
		$instance = new Date('@1387741018', null, array());
		$diff = $this->instance->diff($instance);
		$this->assertTrue($diff instanceOf \DateInterval);
		$this->assertEquals(2, $diff->h);
		$this->assertEquals(46, $diff->i);
		$this->assertEquals(40, $diff->s);

		$instance = new \DateTime('@1387741018');
		$diff = $this->instance->diff($instance);
		$this->assertTrue($diff instanceOf \DateInterval);
		$this->assertEquals(2, $diff->h);
		$this->assertEquals(46, $diff->i);
		$this->assertEquals(40, $diff->s);
	}

	/**
	 * @covers Fuel\Common\Date::format
	 * @group Common
	 */
	public function testFormat()
	{
		$expected = '2013-12-22 23:23:38';
		$result = $this->instance->format('mysql');
		$this->assertEquals($result, $expected);

		$expected = '2013-12-22';
		$result = $this->instance->format('mysql_date');
		$this->assertEquals($result, $expected);

		$expected = '2013-12-22 23:23:38';
		$result = $this->instance->format('mysql', true);
		$this->assertEquals($result, $expected);

		// New York is UTC-5, a delta of -6
		$expected = '2013-12-22 17:23:38';
		$result = $this->instance->format('mysql', 'America/New_York');
		$this->assertEquals($result, $expected);

		// Moscow is UTC+4, a delta of +3
		$expected = '2013-12-23 02:23:38';
		$result = $this->instance->format('mysql', 'Europe/Moscow');
		$this->assertEquals($result, $expected);

		// use a date() type format string
		$expected = '2013-12-22 23:23:38';
		$result = $this->instance->format('Y-m-d H:i:s');
		$this->assertEquals($result, $expected);

		$expected = 'Sun Dec 22 23:23:38 2013';
		$result = $this->instance->format('D M d H:i:s Y');
		$this->assertEquals($result, $expected);
	}
}
