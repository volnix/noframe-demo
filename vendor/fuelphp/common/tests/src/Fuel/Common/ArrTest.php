<?php

namespace Fuel\Common;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-01-29 at 15:39:10.
 */
class ArrTest extends \PHPUnit_Framework_TestCase
{
	/**
	 * @covers Fuel\Common\Arr::set
	 * @group Common
	 */
	public function testSet()
	{
		$array = array();
		$key = 'key';
		$value = 'test';

		Arr::set($array, $key, $value);
		$this->assertArrayHasKey($key, $array);

		$array = array();
		Arr::set($array, array('key' => 'value'));
		$this->assertArrayHasKey($key, $array);

		$array = array();
		Arr::set($array, null, array('key' => 'value'));
		$this->assertArrayHasKey($key, $array);
	}

	// /**
	//  * @covers Fuel\Common\Arr::set
	//  * @group Common
	//  */
	// public function testSetWithNull()
	// {
	// 	$array = array();
	// 	$key = null;
	// 	$value = 'test';

	// 	Arr::set($array, $key, $value);
	// 	$this->assertEquals(1, count($array));
	// }

	/**
	 * @covers Fuel\Common\Arr::set
	 * @group Common
	 */
	public function testSetWithDotkey()
	{
		$array = array();
		$key = 'first.second.third';
		$value = 'test';

		Arr::set($array, $key, $value);
		$this->assertArrayHasKey('third', $array['first']['second']);
	}

	/**
	 * @covers Fuel\Common\Arr::get
	 * @group Common
	 */
	public function testGet()
	{
		$array = array('one', 'two' => array('child' => 'value'), 'last' => 'three', 'with.key' => 'found ya!');

		$this->assertEquals('one', Arr::get($array, 0));
		$this->assertEquals('three',  Arr::get($array, 'last'));
		$this->assertEquals('value',  Arr::get($array, 'two.child'));
		$this->assertEquals($array, Arr::get($array, null));
		$this->assertEquals(array('one', 'last' => 'three'), Arr::get($array, array(0, 'last')));
		$this->assertEquals('default', Arr::get($array, 99, 'default'));
		$this->assertEquals('found ya!',  Arr::get($array, 'with.key'));

		include_once __DIR__.'/../../../../resources/ArrKeyObject.php';
		$object = new ArrKeyObject();
		$this->assertEquals('three',  Arr::get($array, $object));
	}

	/**
	 * @covers Fuel\Common\Arr::get
	 * @expectedException  InvalidArgumentException
	 * @group Common
	 */
	public function testGetException()
	{
		Arr::get('no-array', 'key');
	}

	/**
	 * @covers Fuel\Common\Arr::has
	 * @group Common
	 */
	public function testHas()
	{
		$array = array('one' => 1, 'two' => array('three' => 'foo'));

		$this->assertTrue(Arr::has($array, 'one'));
		$this->assertTrue(Arr::has($array, 'two.three'));
		$this->assertFalse(Arr::has($array, 'four'));
	}

	/**
	 * @covers Fuel\Common\Arr::delete
	 * @group Common
	 */
	public function testDelete()
	{
		$array = array('one' => 1, 'two' => 2);
		$result = Arr::delete($array, 'one');
		$this->assertEquals(1, count($array));
		$this->assertTrue($result);

		$result = Arr::delete($array, 'three');
		$this->assertFalse($result);

		$result = Arr::delete($array, null);
		$this->assertFalse($result);

		$array = array('one' => 1, 'two' => 2);
		$result = Arr::delete($array, array('one', 'two'));
		$this->assertEquals(array(), $array);
		$this->assertEquals(array('one' => true, 'two' => true), $result);

		$array = array('one' => 1, 'two' => 2);
		$result = Arr::delete($array, array('one', 'three'));
		$this->assertEquals(array('two' => 2), $array);
		$this->assertEquals(array('one' => true, 'three' => false), $result);
	}

	/**
	 * @covers Fuel\Common\Arr::merge
	 * @group Common
	 */
	public function testMerge()
	{
		$array1 = array('one' => 1);
		$array2 = array('two' => 2);

		$expected = array('one' => 1, 'two' => 2);

		$this->assertEquals($expected, Arr::merge($array1, $array2));
	}

	/**
	 * @covers Fuel\Common\Arr::merge
	 * @expectedException  InvalidArgumentException
	 * @group Common
	 */
	public function testMergeException()
	{
		Arr::merge('not-an-array', 'not-an-array');
	}

	/**
	 * @covers Fuel\Common\Arr::mergeAssoc
	 * @group Common
	 */
	public function testMergeAssoc()
	{
		$array1 = array(
			'one' => 1,
			2 => 2,
			3 => 3,
			4 => array(
				56
			),
			5=> 87
		);

		$array2 = array(
			1 => 27,
			2 => 90,
			4 => array(
				'give_me' => 'bandwidth'
			),
			6 => '90',
			7 => 'php',
		);

		$expected = array(
			'one' => 1,
			'2' => 90,
			'3' => 3,
			'4' => array(
				'0' => 56,
				'give_me' => 'bandwidth',
			),
			'5' => 87,
			'1' => 27,
			'6' => 90,
			'7' => 'php',
		);

		$result = Arr::mergeAssoc($array1, $array2);
		$this->assertEquals($expected, $result);
	}

	/**
	 * @covers Fuel\Common\Arr::mergeAssoc
	 * @expectedException  InvalidArgumentException
	 * @group Common
	 */
	public function testMergeAssocException1()
	{
		Arr::mergeAssoc('not-an-array', array('not-an-array'));
	}

	/**
	 * @covers Fuel\Common\Arr::mergeAssoc
	 * @expectedException  InvalidArgumentException
	 * @group Common
	 */
	public function testMergeAssocException2()
	{
		Arr::mergeAssoc(array('not-an-array'), 'not-an-array');
	}

	/**
	 * @covers Fuel\Common\Arr::isAssoc
	 * @group Common
	 */
	public function testIsAssoc()
	{
		$this->assertTrue(\Arr::isAssoc(array('yeah' => 'assoc')));
		$this->assertTrue(\Arr::isAssoc(array(1 => 'assoc', 0 => 'yeah')));
		$this->assertFalse(\Arr::isAssoc(array(0 => 'assoc', 1 => 'yeah')));
		$this->assertFalse(\Arr::isAssoc(array('yeah', 'assoc')));
	}

	/**
	 * @covers Fuel\Common\Arr::isAssoc
	 * @expectedException  InvalidArgumentException
	 * @group Common
	 */
	public function testIsAssocException()
	{
		Arr::isAssoc('no-array');
	}

	/**
	 * @covers Fuel\Common\Arr::pluck
	 * @group Common
	 */
	public function testPluck()
	{
		$collection = array(
			array(
				'id' => 2,
				'name' => 'Bill',
				'surname' => 'Cosby',
			),
			array(
				'id' => 5,
				'name' => 'Chris',
				'surname' => 'Rock',
			),
			array(
				'id' => 7,
				'name' => 'Bert',
				'surname' => 'Visser',
			),
		);

		$ids = \Arr::pluck($collection, 'id');
		$this->assertEquals(array(2, 5, 7), $ids);

		$names = \Arr::pluck($collection, 'name', 'id');
		$this->assertEquals(array(2 => 'Bill', 5 => 'Chris', 7 => 'Bert'), $names);
	}

	/**
	 * @covers Fuel\Common\Arr::assocToKeyval
	 * @group Common
	 */
	public function testAssocToKeyval()
	{
		$people = array(
			array(
				"name" => "Jack",
				"age" => 21
			),
			array(
				"name" => "Jill",
				"age" => 23
			)
		);

		$result = Arr::assocToKeyval($people, 'name', 'age');
		$expected = array("Jack" => 21, "Jill" => 23);

		$this->assertEquals($expected, $result);
	}

	/**
	 * @covers Fuel\Common\Arr::assocToKeyval
	 * @expectedException  InvalidArgumentException
	 * @group Common
	 */
	public function testAssocToKeyvalException()
	{
		Arr::assocToKeyval('no-array', 'key', 'val');
	}

	/**
	 * @covers Fuel\Common\Arr::toAssoc
	 * @group Common
	 */
	public function testToAssoc()
	{
		$arr = array('foo', 'bar', 'baz', 'yay');
		$result = Arr::toAssoc($arr);
		$expected = array('foo' => 'bar', 'baz' => 'yay');
		$this->assertEquals($expected, $result);
	}

	/**
	 * @covers Fuel\Common\Arr::toAssoc
	 * @expectedException  BadMethodCallException
	 * @group Common
	 */
	public function testtoAssocException()
	{
		$arr = array('foo', 'bar', 'baz');
		$result = Arr::toAssoc($arr);
	}

	/**
	 * @covers Fuel\Common\Arr::flatten
	 * @group Common
	 */
	public function testFlatten()
	{
		$indexed = array(
			array("a"),
			array("b"),
			array("c"),
		);

		$expected = array("0_0" => "a", "1_0" => "b", "2_0" => "c");
		$result = Arr::flatten($indexed, '_');
		$this->assertEquals($expected, $result);
	}

	/**
	 * @covers Fuel\Common\Arr::flattenAssoc
	 * @group Common
	 */
	public function testFlattenAssoc()
	{
		$people = array(
			array(
				"name" => "Jack",
				"age"  => 21
			),
			array(
				"name" => "Jill",
				"age"  => 23
			)
		);

		$expected = array('0:name' => 'Jack', '0:age' => 21, '1:name' => 'Jill', '1:age' => 23);
		$result = Arr::flattenAssoc($people);
		$this->assertEquals($expected, $result);
	}

	/**
	 * @covers Fuel\Common\Arr::reverseFlatten
	 * @group Common
	 */
	public function testReverseFlatten()
	{
		$input = array(
			'0_name' => 'Jack',
			'0_age' => 21,
			'1_name' => 'Jill',
			'1_age' => 23,
			2 => 'new'
		);

		$expected = array(
			array(
				"name" => "Jack",
				"age"  => 21
			),
			array(
				"name" => "Jill",
				"age"  => 23
			),
			2 => 'new'
		);

		$result = Arr::reverseFlatten($input, '_');
		$this->assertEquals($expected, $result);
	}

	/**
	 * @covers Fuel\Common\Arr::filterPrefixed
	 * @group Common
	 */
	public function testFilterPrefixed()
	{
		$input = array(
			"user_name" => "John",
			"user_surname" => "Lastname",
			"project_name" => "Fuel",
			"project_type" => "Framework",
		);

		$expected = array(
			'name' => 'John',
			'surname' => 'Lastname'
		);

		$result = Arr::filterPrefixed($input, "user_");
		$this->assertEquals($expected, $result);

		$expected = array(
			'project_name' => 'Fuel',
			'project_type' => 'Framework'
		);

		$result = Arr::filterPrefixed($input, "project_", false);
		$this->assertEquals($expected, $result);
	}

	/**
	 * @covers Fuel\Common\Arr::filterRecursive
	 * @group Common
	 */
	public function testFilterRecursive()
	{
		$input = array(
			"user_name" => "John",
			"user_surname" => "Lastname",
			"info" => array(
				0 => array(
					"data" => "a value",
				),
				1 => array(
					"data" => "",
				),
				2 => array(
					"data" => 0,
				),
			),
		);

		$expected = array(
			'user_name' => 'John',
			"user_surname" => "Lastname",
			'info' => array(
				0 => array(
					'data' => 'a value'
				),
			),
		);

		$result = Arr::filterRecursive($input);
		$this->assertEquals($expected, $result);

		$expected = array(
			'user_name' => 'John',
			'info' => array(
				0 => array(
					'data' => 'a value',
				),
				2 => array(
					'data' => 0,
				),
				1 => array(),
			),
			"user_surname" => "Lastname",
		);

		$result = Arr::filterRecursive($input, function($item){ return $item !== ""; });
		$this->assertEquals($expected, $result);
	}

	/**
	 * @covers Fuel\Common\Arr::removePrefixed
	 * @group Common
	 */
	public function testRemovePrefixed()
	{
		$input = array(
			"user_name" => "John",
			"user_surname" => "Lastname",
			"project_name" => "Fuel",
			"project_type" => "Framework",
		);

		$expected = array(
			'user_name' => 'John',
			'user_surname' => 'Lastname',
		);

		$result = Arr::removePrefixed($input, "project");
		$this->assertEquals($expected, $result);
	}

	/**
	 * @covers Fuel\Common\Arr::filterSuffixed
	 * @group Common
	 */
	public function testFilterSuffixed()
	{
		$input = array(
			"name_1" => "John",
			"surname_1" => "Lastname",
			"name_2" => "Ted",
			"surname_2" => "Surname",
		);

		$expected = array(
			'name' => 'John',
			'surname' => 'Lastname',
		);

		$result = Arr::filterSuffixed($input, "_1");
		$this->assertEquals($expected, $result);
	}

	/**
	 * @covers Fuel\Common\Arr::removeSuffixed
	 * @group Common
	 */
	public function testRemoveSuffixed()
	{
		$input = array(
			"name_1" => "John",
			"surname_1" => "Lastname",
			"name_2" => "Ted",
			"surname_2" => "Surname",
		);

		$expected = array(
			"name_2" => "Ted",
			"surname_2" => "Surname",
		);

		$result = Arr::removeSuffixed($input, "_1");
		$this->assertEquals($expected, $result);
	}

	/**
	 * @covers Fuel\Common\Arr::filterKeys
	 * @group Common
	 */
	public function testFilterKeys()
	{
		$input = array(
			"user_name" => "John",
			"user_surname" => "Lastname",
			"project_name" => "Fuel",
			"project_type" => "Framework",
		);

		$expected = array(
			'project_name' => 'Fuel',
			'user_name' => 'John',
		);

		$result = Arr::filterKeys($input, array('project_name', 'user_name'));
		$this->assertEquals($expected, $result);

		$expected = array(
			'project_name' => 'Fuel',
			'project_type' => 'Framework',
		);

		$result = Arr::filterKeys($input, array('user_name', 'user_surname'), true);
		$this->assertEquals($expected, $result);
	}

	/**
	 * @covers Fuel\Common\Arr::insert
	 * @group Common
	 */
	public function testInsert()
	{
		$people = array("Jack", "Jill");

		$expected = array("Humpty", "Jack", "Jill");
		Arr::insert($people, "Humpty", 0);
		$this->assertEquals($expected, $people);

		$expected = array("Humpty", "Hansel", "Gretel", "Jack", "Jill");
		Arr::insert($people, array("Hansel", "Gretel"), 1);
		$this->assertEquals($expected, $people);

		$expected = array(array("name" => "Wolf", "teeth" => "sharp"), "Humpty", "Hansel", "Gretel", "Jack", "Jill");
		Arr::insert($people, array( array("name" => "Wolf", "teeth" => "sharp")), 0);
		$this->assertEquals($expected, $people);
	}

	/**
	 * @covers Fuel\Common\Arr::insert
	 * @expectedException  InvalidArgumentException
	 * @group Common
	 */
	public function testInsertException()
	{
		$people = array("Jack", "Jill");
		Arr::insert($people, "something", 5);
	}

	/**
	 * @covers Fuel\Common\Arr::insertAssoc
	 * @group Common
	 */
	public function testInsertAssoc()
	{
		$character = array("name" => "Jack", "surname" => "Reacher");

		$expected = array("name" => "Jack", "initial" => "P.", "surname" => "Reacher");

		$result = Arr::insertAssoc($character, array("initial" => "P."), 1);
		$this->assertEquals($expected, $character);
		$this->assertTrue($result);

		$character = array("name" => "Jack", "surname" => "Reacher");
		$expected = array("name" => "Jack", "surname" => "Reacher");

		$result = Arr::insertAssoc($character, array("initial" => "P."), 5);
		$this->assertEquals($expected, $character);
		$this->assertFalse($result);
	}

	/**
	 * @covers Fuel\Common\Arr::insertBeforeKey
	 * @group Common
	 */
	public function testInsertBeforeKey()
	{
		$character = array("name" => "Jack", "surname" => "Reacher");

		$expected = array("name" => "Jack", "initial" => "P.", "surname" => "Reacher");

		$result = Arr::insertBeforeKey($character, array("initial" => "P."), "surname", true);
		$this->assertEquals($expected, $character);
		$this->assertTrue($result);

		$character = array(0 => "Jack", 1 => "Reacher");

		$expected = array(0 => "Jack", 1 => "P.", 2 => "Reacher");

		$result = Arr::insertBeforeKey($character, array("initial" => "P."), 1, false);
		$this->assertEquals($expected, $character);
		$this->assertTrue($result);
	}

	/**
	 * @covers Fuel\Common\Arr::insertBeforeKey
	 * @expectedException  InvalidArgumentException
	 * @group Common
	 */
	public function testInsertBeforeKeyException()
	{
		$character = array("name" => "Jack", "surname" => "Reacher");
		$result = Arr::insertBeforeKey($character, array("initial" => "P."), "non-existing-key");
	}

	/**
	 * @covers Fuel\Common\Arr::insertAfterKey
	 * @group Common
	 */
	public function testInsertAfterKey()
	{
		$character = array("name" => "Jack", "surname" => "Reacher");

		$expected = array("name" => "Jack", "initial" => "P.", "surname" => "Reacher");

		$result = Arr::insertAfterKey($character, array("initial" => "P."), "name", true);
		$this->assertEquals($expected, $character);
		$this->assertTrue($result);

		$character = array(0 => "Jack", 1 => "Reacher");

		$expected = array(0 => "Jack", 1 => "P.", 2 => "Reacher");

		$result = Arr::insertAfterKey($character, array("initial" => "P."), 0, false);
		$this->assertEquals($expected, $character);
		$this->assertTrue($result);
	}

	/**
	 * @covers Fuel\Common\Arr::insertAfterKey
	 * @expectedException  InvalidArgumentException
	 * @group Common
	 */
	public function testInsertAfterKeyException()
	{
		$character = array("name" => "Jack", "surname" => "Reacher");
		$result = Arr::insertAfterKey($character, array("initial" => "P."), "non-existing-key");
	}

	/**
	 * @covers Fuel\Common\Arr::insertBeforeValue
	 * @group Common
	 */
	public function testInsertBeforeValue()
	{
		$character = array("name" => "Jack", "surname" => "Reacher");

		$expected = array("name" => "Jack", "initial" => "P.", "surname" => "Reacher");

		$result = Arr::insertBeforeValue($character, array("initial" => "P."), "Reacher", true);
		$this->assertEquals($expected, $character);
		$this->assertTrue($result);
	}

	/**
	 * @covers Fuel\Common\Arr::insertBeforeValue
	 * @expectedException  InvalidArgumentException
	 * @group Common
	 */
	public function testInsertBeforeValueException()
	{
		$character = array("name" => "Jack", "surname" => "Reacher");
		$result = Arr::insertBeforeValue($character, array("initial" => "P."), "non-existing-value");
	}

	/**
	 * @covers Fuel\Common\Arr::insertAfterValue
	 * @group Common
	 */
	public function testInsertAfterValue()
	{
		$character = array("name" => "Jack", "surname" => "Reacher");

		$expected = array("name" => "Jack", "initial" => "P.", "surname" => "Reacher");

		$result = Arr::insertAfterValue($character, array("initial" => "P."), "Jack", true);
		$this->assertEquals($expected, $character);
		$this->assertTrue($result);
	}

	/**
	 * @covers Fuel\Common\Arr::insertAfterValue
	 * @expectedException  InvalidArgumentException
	 * @group Common
	 */
	public function testInsertAfterValueException()
	{
		$character = array("name" => "Jack", "surname" => "Reacher");
		$result = Arr::insertAfterValue($character, array("initial" => "P."), "non-existing-value");
	}

	/**
	 * @covers Fuel\Common\Arr::sort
	 * @group Common
	 */
	public function testSort()
	{
		$result = Arr::sort(array(), 'info.pet.type');
		$this->assertEquals(array(), $result);

		$input = array(
			array(
				'info' => array(
					'pet' => array(
						'type' => 'dog'
					)
				),
			),
			array(
				'info' => array(
					'pet' => array(
						'type' => 'fish'
					)
				),
			),
			array(
				'info' => array(
					'pet' => array(
						'type' => 'cat'
					)
				),
			),
		);

		$expected = array(
			array(
				'info' => array(
					'pet' => array(
						'type' => 'cat'
					)
				),
			),
			array(
				'info' => array(
					'pet' => array(
						'type' => 'dog'
					)
				),
			),
			array(
				'info' => array(
					'pet' => array(
						'type' => 'fish'
					)
				),
			),
		);

		$result = Arr::sort($input, 'info.pet.type');
		$this->assertEquals($expected, $result);

		$expected = array(
			array(
				'info' => array(
					'pet' => array(
						'type' => 'fish'
					)
				),
			),
			array(
				'info' => array(
					'pet' => array(
						'type' => 'dog'
					)
				),
			),
			array(
				'info' => array(
					'pet' => array(
						'type' => 'cat'
					)
				),
			),
		);

		$result = Arr::sort($input, 'info.pet.type', 'desc');
		$this->assertEquals($expected, $result);
	}


	/**
	 * @covers Fuel\Common\Arr::sort
	 * @expectedException  InvalidArgumentException
	 * @group Common
	 */
	public function testSortInvalidArgumentException()
	{
		$result = Arr::sort(array(array("some-key" => "some-value")), "some-key", "illegal-order-value");
	}

	/**
	 * @covers Fuel\Common\Arr::sort
	 * @expectedException  InvalidArgumentException
	 * @group Common
	 */
	public function testSortException()
	{
		$result = Arr::sort("non-array-value", null);
	}

	/**
	 * @covers Fuel\Common\Arr::multisort
	 * @group Common
	 */
	public function testMultisort()
	{
		$input = array(
			'i5' => array(
				'name' => 'Carl',
				'age' => 17,
				'points' => 30,
				'arr' => array(
					'key' => 10,
				),
			),
			'i7' => array(
				'name' => 'carl',
				'age' => 17,
				'points' => 20,
				'arr' => array(
					'key' => 10,
				),
			),
			'i2' => array(
				'name' => 'Bert',
				'age' => 20,
				'points' => 30,
				'arr' => array(
					'key' => 10,
				),
			),
		);

		$expected = array(
			'i2' => array(
				'name' => 'Bert',
				'age' => 20,
				'points' => 30,
				'arr' => array(
					'key' => 10,
				),
			),
			'i7' => array(
				'name' => 'carl',
				'age' => 17,
				'points' => 20,
				'arr' => array(
					'key' => 10,
				),
			),
			'i5' => array(
				'name' => 'Carl',
				'age' => 17,
				'points' => 30,
				'arr' => array(
					'key' => 10,
				),
			),
		);

		$result = \Arr::multisort($input, array(
			'name' => SORT_ASC,
			'points' => array(SORT_ASC, SORT_NUMERIC),
			'age' => array(SORT_ASC, SORT_NUMERIC),
		), true);


	}

	/**
	 * @covers Fuel\Common\Arr::average
	 * @group Common
	 */
	public function testAverage()
	{
		$result = Arr::average(array());
		$this->assertEquals(0, $result);

		$result = Arr::average(array(1,2,3));
		$this->assertEquals(2, $result);
	}

	/**
	 * @covers Fuel\Common\Arr::replaceKey
	 * @group Common
	 */
	public function testReplaceKey()
	{
		$input = array(
			'one' => 1,
			'two' => 2,
			'three' => 3,
		);

		$expected = array(
			'one' => 1,
			'four' => 2,
			'three' => 3,
		);

		$result = Arr::replaceKey($input, 'two', 'four');
		$this->assertEquals($expected, $result);

		$result = Arr::replaceKey($input, array('two' => 'four'));
		$this->assertEquals($expected, $result);
	}

	/**
	 * @covers Fuel\Common\Arr::replaceKey
	 * @expectedException  InvalidArgumentException
	 * @group Common
	 */
	public function testReplaceKeyException()
	{
		$result = Arr::replaceKey('not-an-array', 'two', 'four');
	}

	/**
	 * @covers Fuel\Common\Arr::prepend
	 * @group Common
	 */
	public function testPrepend()
	{
		$input = array(
			'one' => 1,
			'two' => 2,
			'three' => 3,
		);

		$expected = array(
			'zero' => 0,
			'one' => 1,
			'two' => 2,
			'three' => 3,
		);

		Arr::prepend($input, 'zero', 0);
		$this->assertEquals($expected, $input);

		$expected = array(
			'zero' => 4,
			'one' => 1,
			'two' => 2,
			'three' => 3,
		);

		Arr::prepend($input, 'zero', 4);
		$this->assertEquals($expected, $input);
	}

	/**
	 * @covers Fuel\Common\Arr::inArrayRecursive
	 * @group Common
	 */
	public function testInArrayRecursive()
	{
		$input = array(
			0 => 'zero',
			1 => 'one',
			2 => array(
				'two',
			),
			3 => 3
		);

		$this->assertTrue(Arr::inArrayRecursive('one', $input));
		$this->assertTrue(Arr::inArrayRecursive('one', $input, true));
		$this->assertTrue(Arr::inArrayRecursive('two', $input));
		$this->assertTrue(Arr::inArrayRecursive('two', $input, true));

		$this->assertTrue(Arr::inArrayRecursive(3, $input));
		$this->assertTrue(Arr::inArrayRecursive(3, $input, true));
		$this->assertTrue(Arr::inArrayRecursive('3', $input));
		$this->assertFalse(Arr::inArrayRecursive('3', $input, true));
	}

	/**
	 * @covers Fuel\Common\Arr::isMulti
	 * @group Common
	 */
	public function testIsMulti()
	{
		$this->assertTrue(Arr::isMulti(array(array('this'))));
		$this->assertTrue(Arr::isMulti(array(array('this'),'x')));
		$this->assertTrue(Arr::isMulti(array(array('this')), true));
		$this->assertFalse(Arr::isMulti(array(array('this'),'x'), true));
	}

	/**
	 * @covers Fuel\Common\Arr::search
	 * @group Common
	 */
	public function testSearch()
	{
		$input = array(
			'one' => 1,
			'two' => 2,
			'three' => array(
				'a' => 4,
				'b' => 'foo'
			),
			'four',
			array(
					null,
					array(
						null,
						null,
						null,
						array(
							'deep'
						)
					)
				),
		);

		$this->assertEquals('one', Arr::search($input, 1));
		$this->assertEquals(0, Arr::search($input, 'four'));
		$this->assertEquals(null, Arr::search($input, 5));
		$this->assertEquals('three.a', Arr::search($input, 4, null, true));
		$this->assertEquals(null, Arr::search($input, '4', null, true, '.', true));
		$this->assertEquals('1.1.3.0', Arr::search($input, 'deep', null, true));
	}

	/**
	 * @covers Fuel\Common\Arr::search
	 * @expectedException  InvalidArgumentException
	 * @group Common
	 */
	public function testSearchException1()
	{
		Arr::search('not-an-array', 1);
	}

	/**
	 * @covers Fuel\Common\Arr::search
	 * @expectedException  InvalidArgumentException
	 * @group Common
	 */
	public function testSearchException2()
	{
		Arr::search(array(), 1, array('not-allowed-to-be-an-array'));
	}

	/**
	 * @covers Fuel\Common\Arr::search
	 * @expectedException  InvalidArgumentException
	 * @group Common
	 */
	public function testSearchException3()
	{
		Arr::search(array(), 1, null, true, 1);
	}

	/**
	 * @covers Fuel\Common\Arr::unique
	 * @group Common
	 */
	public function testUnique()
	{
		$input = array(
			'one',
			'two',
			'one',
		);

		$expected = array(
			'one',
			'two',
		);

		$this->assertEquals($expected, Arr::unique($input));

		$input = array(
			1 => 'one',
			2 => 'two',
			3 => 'one',
		);

		$expected = array(
			1 => 'one',
			2 => 'two',
		);

		$this->assertEquals($expected, Arr::unique($input));
	}

	/**
	 * @covers Fuel\Common\Arr::sum
	 * @group Common
	 */
	public function testSum()
	{
		$input = array(
			array(
				'age' => 20,
				'name' => 'Bill',
				'scores' => array(
					'math' => 10,
				),
			),
			array(
				'age' => 25,
				'name' => 'Chris',
				'scores' => array(
					'math' => 15,
				),
			),
			array(
				'age' => 38,
				'name' => 'Bert',
				'scores' => array(
					'math' => 5,
				),
			),
		);

		$this->assertEquals(83, Arr::sum($input, 'age'));
		$this->assertEquals(30, Arr::sum($input, 'scores.math'));
	}

	/**
	 * @covers Fuel\Common\Arr::sum
	 * @expectedException  InvalidArgumentException
	 * @group Common
	 */
	public function testSumException()
	{
		Arr::sum('not-an-array', 'key');
	}

	/**
	 * @covers Fuel\Common\Arr::reIndex
	 * @group Common
	 */
	public function testReIndex()
	{
		$input = array(
			2 => 2,
			'three' => 3,
			5 => array(
				2 => 2,
				'three' => 3,
				5 => 5
			),
			7 => 7
		);

		$expected = array(
			'0' => 2,
			'three' => 3,
			'1' => array(
				'0' => 2,
				'three' => 3,
				'1' => 5,
			),
			'2' => 7,
		);

		$this->assertEquals($expected, Arr::reIndex($input));
	}

	/**
	 * @covers Fuel\Common\Arr::previousByKey
	 * @group Common
	 */
	public function testPreviousByKey()
	{
		$input = array(
			2 => 2,
			'three' => 3,
			5 => array(
				2 => 2,
				'three' => 3,
				5 => 5
			),
			7 => 7
		);

		$this->assertEquals(2, Arr::previousByKey($input, 'three'));
		$this->assertEquals('three', Arr::previousByKey($input, '5'));
		$this->assertFalse(Arr::previousByKey($input, '5', false, true));
		$this->assertEquals(3, Arr::previousByKey($input, '5', true));
		$this->assertFalse(Arr::previousByKey($input, 'key-does-not-exist', true));
		$this->assertEquals(null, Arr::previousByKey($input, 2));
	}

	/**
	 * @covers Fuel\Common\Arr::previousByKey
	 * @expectedException  InvalidArgumentException
	 * @group Common
	 */
	public function testPreviousByKeyException()
	{
		Arr::previousByKey('not-an-array', 'key');
	}

	/**
	 * @covers Fuel\Common\Arr::nextByKey
	 * @group Common
	 */
	public function testNextByKey()
	{
		$input = array(
			2 => 2,
			'three' => 3,
			5 => array(
				2 => 2,
				'three' => 3,
				5 => 5
			),
			7 => 7
		);

		$this->assertEquals(5, Arr::nextByKey($input, 'three'));
		$this->assertEquals('three', Arr::nextByKey($input, '2'));
		$this->assertFalse(Arr::nextByKey($input, '2', false, true));
		$this->assertEquals(7, Arr::nextByKey($input, '5', true));
		$this->assertFalse(Arr::nextByKey($input, 'key-does-not-exist', true));
		$this->assertEquals(null, Arr::nextByKey($input, 7));
	}

	/**
	 * @covers Fuel\Common\Arr::nextByKey
	 * @expectedException  InvalidArgumentException
	 * @group Common
	 */
	public function testNextByKeyException()
	{
		Arr::nextByKey('not-an-array', 'key');
	}

	/**
	 * @covers Fuel\Common\Arr::previousByValue
	 * @group Common
	 */
	public function testPreviousByValue()
	{
		$input = array(
			2 => 2,
			'three' => 3,
			5 => array(
				2 => 2,
				'three' => 3,
				5 => 5
			),
			7 => 7
		);

		$this->assertEquals(2, Arr::previousByValue($input, 3));
		$this->assertEquals(array(2 => 2,'three' => 3,5 => 5), Arr::previousByValue($input, '7'));
		$this->assertFalse(Arr::previousByValue($input, '5', false, true));
		$this->assertEquals('three', Arr::previousByValue($input, array(2 => 2,'three' => 3,5 => 5), false));
		$this->assertFalse(Arr::previousByValue($input, 'value-does-not-exist'));
		$this->assertEquals(null, Arr::previousByValue($input, 2));
	}

	/**
	 * @covers Fuel\Common\Arr::previousByValue
	 * @expectedException  InvalidArgumentException
	 * @group Common
	 */
	public function testPreviousByValueException()
	{
		Arr::previousByValue('not-an-array', 'key');
	}

	/**
	 * @covers Fuel\Common\Arr::nextByValue
	 * @group Common
	 */
	public function testNextByValue()
	{
		$input = array(
			2 => 2,
			'three' => 3,
			5 => array(
				2 => 2,
				'three' => 3,
				5 => 5
			),
			7 => 7
		);

		$this->assertEquals(array(2 => 2,'three' => 3,5 => 5), Arr::nextByValue($input, 3));
		$this->assertEquals(7, Arr::nextByValue($input, array(2 => 2,'three' => 3,5 => 5)));
		$this->assertFalse(Arr::nextByValue($input, '7', false, true));
		$this->assertEquals(3, Arr::nextByValue($input, '2', true));
		$this->assertFalse(Arr::nextByValue($input, 'key-does-not-exist', true));
		$this->assertEquals(null, Arr::nextByValue($input, 7));
	}

	/**
	 * @covers Fuel\Common\Arr::nextByValue
	 * @expectedException  InvalidArgumentException
	 * @group Common
	 */
	public function testNextByValueException()
	{
		Arr::nextByValue('not-an-array', 'key');
	}

	/**
	 * @covers Fuel\Common\Arr::subset
	 * @group Common
	 */
	public function testSubset()
	{
		$input = array(
			"user" => array(
				"name" => "John",
				"surname" => "Lastname",
			),
			"project" => array(
				"name" => "Fuel",
				"type" => "Framework",
			),
		);

		$expected = array(
			'project' => array(
				 'name' => 'Fuel',
			 ),
			'user' => array(
				 'name' => 'John',
			 ),
		);

		$result = Arr::subset($input, array('project.name', 'user.name'));
		$this->assertEquals($expected, $result);

		$expected = array(
			'project' => array(
				 'name' => 'Fuel',
				 'manager' => null,
			 )
		);

		$result = Arr::subset($input, array('project.name', 'project.manager'));
		$this->assertEquals($expected, $result);

		$expected = array(
			'project' => array(
				 'name' => 'Fuel',
				 'manager' => 'Not Provided',
			 ),
			'user' => array(
				 'name' => 'John',
				 'surname' => 'Lastname',
			 ),
			'not_provided' => 'Not Provided',
		);

		$result = Arr::subset($input, array('project.name', 'project.manager', 'user', 'not_provided'), 'Not Provided');
		$this->assertEquals($expected, $result);
	}
}
